{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","err","stop","this","components_Titles","components_Form","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc822066.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = () => (\n  <div>\n    <h1 className=\"title-container__title\">weather_IO</h1>\n    <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\n  </div>\n);\n\nexport default Titles;\n","import React from 'react';\n\nconst Form = (props) => (\n  <form onSubmit={props.getWeather}>\n    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n    <button>Get Weather</button>\n  </form>\n);\n\nexport default Form\n","import React from 'react';\r\n\r\nconst Weather = props => (\r\n\t<div className=\"weather__info\">\r\n\t {\r\n\t \tprops.city && props.country && <p className=\"weather__key\"> Location:\r\n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\r\n\t \t</p>\r\n\t }\r\n\t {\r\n\t \tprops.temperature && <p className=\"weather__key\"> Temperature:\r\n\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span>\r\n\t \t</p>\r\n\t }\r\n\t {\r\n\t \tprops.humidity && <p className=\"weather__key\"> Humidity:\r\n\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\r\n\t \t</p>\r\n\t }\r\n\t {\r\n\t \tprops.description && <p className=\"weather__key\"> Conditions:\r\n\t \t\t<span className=\"weather__value\"> { props.description } </span>\r\n\t </p>\r\n\t }\r\n\t {\r\n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>\r\n\t }\r\n\t</div>\r\n);\r\nexport default Weather;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Titles from './components/Titles';\r\nimport Form from './components/Form'\r\nimport Weather from './components/Weather'\r\n\r\nconst API_KEY = '3d7651c8b27096dd35747d3451a8083f';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n    const data = await api_call.json();\r\n    if (city && country) {\r\n      try{\r\n        console.log(data);\r\n        this.setState({\r\n          temperature: data.main.temp,\r\n          city: data.name,\r\n          country: data.sys.country,\r\n          humidity: data.main.humidity,\r\n          description: data.weather[0].description,\r\n          error: \"\"\r\n      });\r\n      }\r\n      catch(err) {\r\n        this.setState({\r\n          error: \"The city or country entered was not found. Try again\"\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: \"Please enter city and country\"\r\n      });\r\n    }\r\n  }\r\n    render() {\r\n      return (\r\n        <div>\r\n         <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n           <div className=\"container\">\r\n            <div className=\"row\">\r\n             <div className=\"title-container\">\r\n              <Titles />\r\n             </div>\r\n             <div className=\"form-container\">\r\n             <Form getWeather={this.getWeather}/>\r\n             <Weather\r\n               temperature={this.state.temperature}\r\n               city={this.state.city}\r\n               country={this.state.country}\r\n               humidity= {this.state.humidity}\r\n               description={this.state.description}\r\n               error={this.state.error}/>\r\n             </div>\r\n            </div>\r\n           </div>\r\n          </div>\r\n         </div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}